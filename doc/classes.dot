graph classes {
	
	graph [bgcolor=transparent]
	node [shape=record,style=filled,fillcolor=white]

	Element [label="{Node\<T,U\>|
			  U x\l|
			  U y\l|
			  U z\l|
			  T * data\l}"]

	AABB [label="{\N\<U\>|
			U x\l|
			U y\l|
			U z\l|
			U w\l|
			U h\l|
			U d\l|
			bool contains(Node node)\l|
			bool intersects(AABB other)\l}"]

	LinTree [label="{\N\<T,U\>|
			   AABB\<U\> boundary\l|
			   unsigned int capacity\l|
			   std::vector\<Node\> nodes[capacity]\l|
			   LinTree * W\l|
			   LinTree * E\l|
			   bool insert(Node node)\l|
			   std::vector\<Node\> query(AABB range)\l|
			   void subdivide()\l}"]

	QuadTree [label="{\N\<T,U\>|
			   AABB\<U\> boundary\l|
			   unsigned int capacity\l|
			   std::vector\<Node\> nodes[capacity]\l|
			   QuadTree * NW\l|
			   QuadTree * NE\l|
			   QuadTree * SE\l|
			   QuadTree * SW\l|
			   bool insert(Node node)\l|
			   std::vector\<Node\> query(AABB range)\l|
			   void subdivide()\l}"]
	
	OcTree [label="{\N\<T,U\>|
			  AABB\<U\> boundary\l|
			  unsigned int capacity\l|
			  std::vector\<Node\> nodes[capacity]\l|
			  OcTree * NWN\l|
			  OcTree * NEN\l|
			  OcTree * SEN\l|
			  OcTree * SWN\l|
			  OcTree * NWS\l|
			  OcTree * NES\l|
			  OcTree * SES\l|
			  OcTree * SWS\l|
			  bool insert(Node node)\l|
			  std::vector\<Node\> query(AABB range)\l|
			  void subdivide()\l}"]
	
	
	Element -- LinTree
	Element -- QuadTree
	Element -- OcTree
	AABB -- LinTree
	AABB -- QuadTree
	AABB -- OcTree
	LinTree -- LinTree
	QuadTree -- QuadTree
	OcTree -- OcTree

}
